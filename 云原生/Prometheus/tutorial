# Prometheus 教程

在 Prometheus 中，数据模型是系统存储、检索和分析监控数据的基础。了解 Prometheus 的数据模型有助于理解其监控数据的存储和查询方式。以下将详细解释 Prometheus 的数据模型，包括**时间序列**、**指标（Metric）**、**标签（Labels）**、**样本（Sample）** 等核心概念。

---

## 一、Prometheus 数据模型的核心概念

Prometheus 的数据模型是**基于时间序列的**，每个时间序列由**指标名称**和**标签**定义，随着时间不断积累数据点（样本）。每个数据点包含一个时间戳和一个对应的值。

### 1. 时间序列（Time Series）

在 Prometheus 中，监控数据的基本单元是**时间序列**，即随着时间变化而记录的值。一个时间序列由以下部分组成：
- **指标名称**（Metric Name）：用来描述时间序列的类型或含义。
- **标签（Labels）**：为时间序列提供了维度，用于区分同一个指标的不同实例。
- **时间戳和数值对（Sample）**：每个时间序列都会随着时间不断记录值，每个记录都包括一个时间戳和一个数值。

#### 时间序列的组成：
```
<指标名称>{<标签>}：<时间戳> => <数值>
```

#### 示例：
```
http_requests_total{method="GET", handler="/api"} => [时间戳: 2024-09-23T12:00:00Z, 值: 425]
```

在这个例子中，`http_requests_total` 是指标名称，`method` 和 `handler` 是标签，`425` 是该时间点记录的请求总数。

---

## 二、指标（Metrics）

### 1. 什么是指标？

指标（Metric）是 Prometheus 的基础单位，用来表示监控对象的某个特性或度量。Prometheus 提供了四种基本的指标类型，每种指标类型都有其特定的用途。

### 2. 四种指标类型

#### (1) **Counter（计数器）**
- **功能**：表示只能增长的累积值，通常用于记录事件的发生次数。
- **特点**：值永远不会减少，除非系统重启或重置。
- **应用场景**：HTTP 请求总数、任务执行次数等。

##### 示例：
```go
http_requests_total{method="POST"} 1000
```
该计数器记录了 POST 请求总数。

#### (2) **Gauge（仪表盘）**
- **功能**：表示可以上下变化的值，适合监控当前状态的数值。
- **特点**：既可以增加也可以减少，适合监控资源的使用情况。
- **应用场景**：CPU 使用率、内存使用量、磁盘空间等。

##### 示例：
```go
memory_usage_bytes 524288000
```
该仪表盘记录了当前内存使用量为 500 MB。

#### (3) **Histogram（直方图）**
- **功能**：用于记录数据的分布情况，通常用于监控响应时间或事件大小。
- **特点**：数据会被分类到不同的桶（buckets）中，用于观察数据的分布和变化趋势。
- **应用场景**：请求响应时间分布、事件大小分布等。

##### 示例：
```go
http_request_duration_seconds_bucket{le="0.5"} 24000
http_request_duration_seconds_bucket{le="1.0"} 35000
```
该直方图记录了请求持续时间小于等于 0.5 秒的请求数量为 24000，小于等于 1 秒的请求数量为 35000。

#### (4) **Summary（摘要）**
- **功能**：类似于 Histogram，但可以直接计算分位数（如 50%、90% 响应时间）。
- **特点**：能够实时地报告百分位数据，用于跟踪请求时长或事件大小的分布。
- **应用场景**：响应时间的百分位数计算，如 95% 的请求在 0.3 秒内完成。

##### 示例：
```go
http_request_duration_seconds_sum 120.5
http_request_duration_seconds_count 532
```
该摘要记录了总响应时间为 120.5 秒，总请求数量为 532 次。

---

## 三、标签（Labels）

### 1. 什么是标签？

**标签（Labels）** 是 Prometheus 时间序列中的重要组成部分，它为每个指标提供了额外的上下文。通过标签，Prometheus 可以区分同一指标的不同实例。例如，可以通过标签区分不同的 HTTP 请求方法或不同的状态码。

### 2. 标签的作用

- **多维数据**：标签允许用户使用相同的指标名称存储多维数据，例如通过不同维度（如方法、状态码、主机名）记录同一类型的事件。
- **数据聚合**：标签使 Prometheus 能够根据不同的维度聚合和分析数据，例如查看特定 HTTP 方法的总请求数或特定状态码的响应时间。

#### 标签示例：
```go
http_requests_total{method="GET", status="200"} 3000
http_requests_total{method="POST", status="200"} 1500
```
这里 `method` 和 `status` 是标签，`3000` 和 `1500` 是 GET 和 POST 请求成功的总次数。

### 3. 标签使用的注意事项

- **标签不要过多**：过多的标签会导致时间序列数据量膨胀，增加存储和计算开销。
- **避免高基数标签**：高基数标签（如用户 ID、IP 地址）会产生大量的独立时间序列，可能影响系统性能。

---

## 四、样本（Sample）

### 1. 什么是样本？

每个时间序列都是由多个**样本（Sample）**组成的。每个样本包含一个**时间戳**和一个**值**。Prometheus 会定期抓取目标服务的监控数据，并以样本的形式存储。

- **时间戳（Timestamp）**：记录数据的时间点，通常精确到毫秒。
- **值（Value）**：记录在该时间点的指标值，通常是浮点数。

### 2. 样本的结构

样本是 Prometheus 存储时间序列的基本单元，样本的结构如下：
```
<时间戳> => <值>
```

#### 示例：
```
[2024-09-23T12:00:00Z, 425]
```
在这个例子中，时间戳 `2024-09-23T12:00:00Z` 记录的数值是 `425`。

### 3. 样本的存储与压缩

Prometheus 会通过高效的时间序列数据库（TSDB）存储样本数据。Prometheus 使用压缩技术来优化存储空间，将大量时间序列数据压缩为紧凑的格式，降低磁盘使用。

---

## 五、PromQL 查询中的数据模型

PromQL 是 Prometheus 的查询语言，允许用户根据标签、时间戳和指标名称进行灵活的查询。理解 Prometheus 数据模型有助于更好地使用 PromQL。

#### 查询示例：
- **查询特定标签的时间序列**：
  ```promql
  http_requests_total{method="GET"}
  ```

- **聚合标签维度数据**：
  ```promql
  sum(http_requests_total) by (status)
  ```
  该查询返回每个 `status` 标签下的 HTTP 请求总数。

- **查询一段时间内的变化速率**：
  ```promql
  rate(http_requests_total[5m])
  ```
  该查询计算过去 5 分钟内的 HTTP 请求速率。

---

## 六、总结

Prometheus 的数据模型基于**时间序列**，通过**指标**和**标签**来定义每个时间序列的维度和含义。时间序列随着时间不断记录**样本**，这些样本以时间戳和值的形式存储。Prometheus 的四种指标类型（计数器、仪表盘、直方图、摘要）提供了对不同数据的精准监控和分析能力。通过理解这些核心概念，你可以更有效地使用 Prometheus 进行系统监控和告警。

